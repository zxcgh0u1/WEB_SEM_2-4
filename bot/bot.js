const { Telegraf } = require("telegraf");
const axios = require("axios");
require("dotenv").config();

const BOT_TOKEN = process.env.BOT_TOKEN;
const API_URL = process.env.API_URL || "http://localhost:3000/api";

const bot = new Telegraf(BOT_TOKEN);

// ================== START ==================
bot.start((ctx) => {
  ctx.reply(`–ü—Ä–∏–≤–µ—Ç! –Ø Volonter0_bot ü§ñ

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/register name email phone ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
/volunteers ‚Äî —Å–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤
/events ‚Äî —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
/reports ‚Äî –≤–∞—à–∏ –æ—Ç—á—ë—Ç—ã
/request event_id ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ

‚ùì –ê –µ—â—ë –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –æ—Ç–≤–µ—Ç–∏—Ç—å üòâ`);
});

// ================== REGISTRATION ==================
bot.command("register", async (ctx) => {
  try {
    const parts = ctx.message.text.split(" ");
    if (parts.length < 4) {
      return ctx.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /register –ò–º—è email —Ç–µ–ª–µ—Ñ–æ–Ω");
    }

    const name = parts[1];
    const email = parts[2];
    const phone = parts[3];
    const tg_id = ctx.from.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if (!/^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/.test(email)) {
      return ctx.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü—Ä–∏–º–µ—Ä: ivan@example.com");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (!/^[78][0-9]{10}$/.test(phone)) {
      return ctx.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω. –ü—Ä–∏–º–µ—Ä: 89991112233");
    }

    const res = await axios.post(`${API_URL}/volunteers`, {
      name,
      email,
      phone,
      tg_id,
    });

    ctx.reply(`‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ID: ${res.data.id}`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err.response?.data || err.message);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è).");
  }
});

// ================== VOLUNTEERS ==================
bot.command("volunteers", async (ctx) => {
  try {
    const res = await axios.get(`${API_URL}/volunteers`);
    const volunteers = res.data;

    if (volunteers.length === 0) {
      return ctx.reply("üì≠ –í–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ –Ω–µ—Ç");
    }

    let msg = "üôã –í–æ–ª–æ–Ω—Ç—ë—Ä—ã:\n\n";
    volunteers.forEach((v) => {
      msg += `#${v.id} ‚Äî ${v.name} (${v.email})\n`;
    });

    ctx.reply(msg);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ /volunteers:", err);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤.");
  }
});

// ================== EVENTS ==================
bot.command("events", async (ctx) => {
  try {
    const res = await axios.get(`${API_URL}/events`);
    const events = res.data;

    if (events.length === 0) {
      return ctx.reply("üì≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç");
    }

    let msg = "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n";
    events.forEach((e) => {
      msg += `#${e.id} ‚Äî ${e.title} (${new Date(e.date).toLocaleDateString()})\n`;
      msg += `–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${e.organizer_name || "‚Äî"}\n`;
      msg += `–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${e.current_participants}/${e.max_participants}\n`;
      msg += `–û–ø–∏—Å–∞–Ω–∏–µ: ${e.description || "‚Äî"}\n\n`;
    });

    ctx.reply(msg);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ /events:", err);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.");
  }
});

// ================== REPORTS ==================
bot.command("reports", async (ctx) => {
  try {
    const tg_id = ctx.from.id;

    const volRes = await axios.get(`${API_URL}/volunteers/by-tg/${tg_id}`);
    if (!volRes.data) {
      return ctx.reply("‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä!");
    }

    const volunteer_id = volRes.data.id;

    const repRes = await axios.get(`${API_URL}/reports?volunteer_id=${volunteer_id}`);
    const reports = repRes.data;

    if (reports.length === 0) {
      return ctx.reply("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á—ë—Ç–æ–≤");
    }

    let msg = "üìä –í–∞—à–∏ –æ—Ç—á—ë—Ç—ã:\n\n";
    reports.forEach((r) => {
      msg += `#${r.id} ‚Äî –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ${r.event_id}, ${r.hours}—á\n–û—Ç–∑—ã–≤: ${r.feedback || "‚Äî"}\n\n`;
    });

    ctx.reply(msg);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ /reports:", err);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–æ–≤.");
  }
});

// ================== REQUEST ==================
bot.command("request", async (ctx) => {
  try {
    const parts = ctx.message.text.split(" ");
    if (parts.length < 2) {
      return ctx.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /request event_id");
    }

    const event_id = parseInt(parts[1]);
    const tg_id = ctx.from.id;
    const username = ctx.from.username || ctx.from.first_name;

    await axios.post(`${API_URL}/requests`, {
      tg_id,
      username,
      event_id,
    });

    ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ #${event_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", err.response?.data || err.message);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.");
  }
});

// ================== –õ–Æ–ë–û–ï –°–û–û–ë–©–ï–ù–ò–ï ‚Üí ASK ==================
bot.on("text", async (ctx) => {
  try {
    const question = ctx.message.text.trim();

    // –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å)
    if (question.startsWith("/")) return;

    const res = await axios.post(`${API_URL}/ask`, { question });

    ctx.reply(res.data.answer || "‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–µ:", err.response?.data || err.message);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.");
  }
});

// ================== START BOT ==================
bot.launch();
console.log("ü§ñ Bot –∑–∞–ø—É—â–µ–Ω!");
